package ca.jay.jac444.workshop3;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;

@FunctionalInterface
interface W3MapFuncObj
{
	public void increaseCount(String key);
}

public class W3Task1 {

	public static void main(String[] args) throws Exception
	{
		// check command-line argument
		if(args != null && args.length == 0)
		{
			System.err.println("It needs a command-line argument for a file name");
			System.exit(0);
		}

		// Create a TreeMap to hold words as key and count as value 
		Map<String, Integer> map = new TreeMap<>();		
		
		// store word lists from the file		
		List<String> words = Arrays.asList(W3TaskUtil.getWordLines(args[0]));
		
/*
		List<String> first = words.stream()
		.filter(k -> k.length() > 0)
		.map(m -> m.toLowerCase())		
		.filter(k -> !map.containsKey(k)).collect(Collectors.toList());

		first.forEach(k -> map.put(k, 1));
		
		words.stream()
		.filter(k -> k.length() > 0)
		.map(m -> m.toLowerCase())		
		.filter(k -> map.containsKey(k))
		.forEach(k -> map.put(k, map.get(k) + 1));
*/

		words.stream()
		.filter(k -> k.length() > 0)
		.map(m -> m.toLowerCase())
		.forEach(
			(k) -> {
				if (!map.containsKey(k)) 
					map.put(k, 1); 
				else 
					map.put(k, map.get(k) + 1); 
			}				
		);
		
		
	/*
		W3MapFuncObj func = (k) -> {
			if (!map.containsKey(k)) 
				map.put(k, 1); 
			else 
				map.put(k, map.get(k) + 1); 
		};
	*/	
		
		// 
		//for (String e: words) func.increaseCount(e);
 
		// Get all entries into a set	 
		Set<Map.Entry<String, Integer>> entrySet = map.entrySet();
	 
		// Get key and value from each entry 
		for (Map.Entry<String, Integer> entry: entrySet) 
			System.out.println(entry.getValue() + "\t" + entry.getKey()); 
		
		//OR replace the get all entries with Lambda Expression 
		map.forEach((k, v) -> System.out.println(v + "\t" + k)); 
	} 	
	
}

